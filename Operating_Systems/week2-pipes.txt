1. Сортирайте /etc/passwd лексикографски по поле UserID.

sort -t: -k 3 /etc/passwd

<=>

cat /etc/passwd | sort -t: -k 3

2. Сортирайте /etc/passwd числово по поле UserID.
(Открийте разликите с лексикографската сортировка)

sort -n -t: -k 3 /etc/passwd

<=>

cat /etc/passwd | sort -n -t: -k 3

3. Изведете само 1-ва и 5-та колона на файла /etc/passwd спрямо разделител ":".

cat /etc/passwd | cut -d : -f 1,5

4. Изведете съдържанието на файла /etc/passwd от 2-ри до 6-ти символ.

head -n 1 /etc/passwd | cut -c 2-7

5. Отпечатайте потребителските имена и техните home директории от /etc/passwd.

cat /etc/passwd | cut -d : -f 1,6

6. Отпечатайте втората колона на /etc/passwd, разделена спрямо символ '/'.

cat /etc/passwd | cut -d '/' -f 2

7. Изведете броя на байтовете в /etc/passwd.
Изведете броя на символите в /etc/passwd.
Изведете броя на редовете  в /etc/passwd.

- cat /etc/passwd | wc -m
- cat /etc/passwd | wc -c
- cat /etc/passwd | wc -l

8. С отделни команди, извадете от файл /etc/passwd:
- първите 12 реда
- първите 26 символа
- всички редове, освен последните 4
- последните 17 реда
- 151-я ред (или друг произволен, ако нямате достатъчно редове)
- последните 4 символа от 13-ти ред (символът за нов ред не е част от реда)

- cat /etc/passwd | head -n 12
- cat /etc/passwd | tr -d "\n" | cut -c -26
- cat /etc/passwd | head -n -4
- cat /etc/passwd | tail -n 17
- cat /etc/passwd | head -n 151 | tail -n 1
- cat /etc/passwd | head -n 13 | tail -n 1 | rev | cut -c 1-4 | rev

9. Запаметете във файл в своята home директория резултатът от командата `df -P`.

df -P > output.txt

Напишете команда, която извежда на екрана съдържанието на този файл, без първия ред (хедъра), сортирано по второ поле (numeric).

cat output.txt | tail -n +2 | tr -s ' ' | sort -n -t ' ' -k 2

<=>

cat output.txt | tail -n + 2 | sort -nrk2

10. Запазете само потребителските имена от /etc/passwd във файл users във вашата home директория.

 cat /etc/passwd | cut -d : -f 1 > users.txt

11. Изпишете всички usernames от /etc/passwd с главни букви.

cat /etc/passwd | cut -d : -f 1 | tr a-z A-Z


12. 

Изведете реда от /etc/passwd, на който има информация за вашия потребител.

cat /etc/passwd | grep -F s62539

Изведедете този ред и двата реда преди него.

cat /etc/passwd | grep -F -B 2  s62539

Изведете този ред, двата преди него, и трите след него.

cat /etc/passwd | grep -F -B 2 -A 3 s62539

Изведете *само* реда, който се намира 2 реда преди реда, съдържащ информация за вашия потребител.

cat /etc/passwd | grep -F -B 2 s62539 | head -n 1


13. Изведете колко потребители не изпозват /bin/bash за login shell според /etc/passwd

cat /etc/passwd | grep -n -F -v /bin/bash | sort -rn -t ':' -k 1 | head -n 1 | cut -d : -f 1

14. Изведете само имената на хората с второ име по-дълго от 6 (>6) символа според /etc/passwd

cat /etc/passwd | tr -d ',' | cut -d ':' -f 5 | awk 'length($2) > 6 {print $0}'

15. Изведете имената на хората с второ име по-късо от 8 (<=7) символа според /etc/passwd // !(>7) = ?

cat /etc/passwd | tr -d ',' | cut -d ':' -f 5 | awk 'length($2) < 8 {print $0}'

16. Изведете целите редове от /etc/passwd за хората от 03-a-5003

cat /etc/passwd | tr -d ',' |  awk -F ':' '$5~/^[^:]+ [^:]{1,7}$/ {print $0}'


17. Копирайте <РЕПО>/exercises/data/emp.data във вашата home директория.
Посредством awk, използвайки копирания файл за входнни данни, изведете:

- общия брой редове
- третия ред
- последното поле от всеки ред
- последното поле на последния ред
- всеки ред, който има повече от 4 полета
- всеки ред, чието последно поле е по-голямо от 4
- общия брой полета във всички редове
- броя редове, в които се среща низът Beth
- най-голямото трето поле и редът, който го съдържа
- всеки ред, който има поне едно поле
- всеки ред, който има повече от 17 знака
- броя на полетата във всеки ред и самият ред
- първите две полета от всеки ред, с разменени места
- всеки ред така, че първите две полета да са с разменени места
- всеки ред така, че на мястото на първото поле да има номер на реда
- всеки ред без второто поле
- за всеки ред, сумата от второ и трето поле
- сумата на второ и трето поле от всеки ред

- cat /etc/passwd | awk 'END { print NR } '
- cat /etc/passwd | awk 'NR == 3 { print $0 }'
- cat /etc/passwd | awk -F : 'END { print $NF }'
- cat /etc/passwd | awk -F : 'NF > 4 { print $0 }'
- cat /etc/passwd | awk -F : 'length($NF) > 4 { print $0 }'
- cat /etc/passwd | awk -F : 'BEGIN { count = 0} { count += NF} END { print count}'
- cat /etc/passwd | awk -F : '$0~/Beth/ {print $0}'
- cat /etc/passwd | awk -v MAX=0 -v LINE='' -F : '$3 > MAX {MAX = $3; LINE=NR} END { print MAX, " - ", LINE }'
- cat /etc/passwd | awk -F ':' 'NF >= 1 { print $0}'
- cat /etc/passwd | awk -F ':' 'length($0) > 17 { print $0}'
- cat /etc/passwd | awk -F ':' '{ print NF, " - ", NR }'
- cat /etc/passwd | awk -F ':' '{print $2, $1}'
- cat /etc/passwd | awk -F ':' -v placeholder="" '{placeholder=$1; $1=$2; $2=placeholder; print $0}'
- cat /etc/passwd | awk -F ':' '{$1=NR; print $0 }'
- cat /etc/passwd | awk -F ':' '{$2=""; print $0 }'
- cat /etc/passwd | awk -F ':' '{print $2 + $3 }'
- cat /etc/passwd | awk -F ':' -v SUM=0 '{SUM+=$3 + $4} END { print SUM }'


18. Намерете само Group ID-то си от файлa /etc/passwd.

cat /etc/passwd | awk -F : '$1~/^s62539$/ {print $4}'

19. Колко коментара има във файла /etc/services ? Коментарите се маркират със символа #, след който всеки символ на реда се счита за коментар.

cat /etc/services | grep '#' | wc -l

20. Колко файлове в /bin са 'shell script'-oве? (Колко файлове в дадена директория са ASCII text?)

find /bin/ -maxdepth 1 -type f | xargs -I {} file {} | grep 'shell script' | wc -l

21. Направете списък с директориите на вашата файлова система, до които нямате достъп. Понеже файловата система може да е много голяма, търсете до 3 нива на дълбочина.

find / -maxdepth 2 -type d 2>&1 1> /dev/null | cut -d ' ' -f 2

22.  Създайте следната файлова йерархия в home директорията ви:
dir5/file1
dir5/file2
dir5/file3

Посредством vi въведете следното съдържание:
file1:
1
2
3

file2:
s
a
d
f

file3:
3
2
1
45
42
14
1
52

Изведете на екрана:
	* статистика за броя редове, думи и символи за всеки един файл
	* статистика за броя редове и символи за всички файлове
	* общия брой редове на трите файла

- wc -l -w -c dir5/file{1,2,3}
- cat dir5/file{1,2,3} | wc -l -w -c
- cat dir5/file{1,2,3} | wc -l

23. Във file2 (inplace) подменете всички малки букви с главни.

- cat dir5/file2 | tr '[a-z]' '[A-Z]' > temp && mv temp dir5/file2

24. Във file3 (inplace) изтрийте всички "1"-ци.

cat dir5/file3 | tr -d 1  > temp && mv temp dir5/file3 - трие само 1-ците
sed -i '/1/d' file3 - трие редовете

25. Изведете статистика за най-често срещаните символи в трите файла.

cat dir5/file{1,2,3} | grep -o . | sort | uniq -c

26. Направете нов файл с име по ваш избор, чието съдържание е конкатенирани
съдържанията на file{1,2,3}.

cat dir5/file{1,2,3} 1> temp

27. Прочетете текстов файл file1 и направете всички главни букви малки като
запишете резултата във file2.

cat dir5/file1 | tr '[a-z]' '[A-Z]' >> dir5/file2

28. Намерете броя на символите, различни от буквата 'а' във файла /etc/passwd

cat /etc/passwd | grep -o [^a]. | wc -l

29. Намерете броя на уникалните символи, използвани в имената на потребителите от
/etc/passwd.

cat /etc/passwd | cut -d : -f 5 | grep -o . | sort | uniq -c

30.Отпечатайте всички редове на файла /etc/passwd, които не съдържат символния низ 'ов'.

cat /etc/passwd | grep -v '[ов]'

31. Отпечатайте последната цифра на UID на всички редове между 28-ми и 46-ред в /etc/passwd.

 cat /etc/passwd | awk -F ':' 'NR > 28 && NR < 46 { print $3 % 10}'

 <=>

 cat /etc/passwd | awk -F ':' 'NR > 28 && NR < 46 { last_digit = substr($3, length($3)); print last_digit }'

32. Отпечатайте правата (permissions) и имената на всички файлове, до които имате
read достъп, намиращи се в директорията /tmp. (hint: 'man find', вижте -readable)

 find /tmp -type f -readable -printf "%M\t%p\n" 2> /dev/null

33. Намерете имената на 10-те файла във вашата home директория, чието съдържание е
редактирано най-скоро. На първо място трябва да бъде най-скоро редактираният
файл. Намерете 10-те най-скоро достъпени файлове. (hint: Unix time)

find ~ -maxdepth 1 -type f -printf '%T@ %p\n' | sort -n | tail -n 10

34. да приемем, че файловете, които съдържат C код, завършват на `.c` или `.h`.
Колко на брой са те в директорията `/usr/include`?
Колко реда C код има в тези файлове?

find /usr/include -type f -name '*.[hc]' -exec cat {} ';' | wc -l

35.  Даден ви е ASCII текстов файл - /etc/services. Отпечатайте хистограма на 10-те най-често срещани думи.
Дума наричаме непразна последователност от букви. Не правим разлика между главни и малки букви.
Хистограма наричаме поредица от редове, всеки от които има вида:
<брой срещания> <какво се среща толкова пъти>

cat /etc/services | egrep -o '[[:alpha:]]+' | sort | uniq -c | sort -nr | head -n 10

36. Вземете факултетните номера на студентите (описани във файла
<РЕПО>/exercises/data/mypasswd.txt) от СИ и ги запишете във файл si.txt сортирани.

Студент е част от СИ, ако home директорията на този потребител (според
<РЕПО>/exercises/data/mypasswd.txt) се намира в /home/SI директорията.

cat mypasswd | grep '/home/SI' | cut -d : -f 1| tr -d 's' > si.txt

37. За всяка група от /etc/group изпишете "Hello, <група>", като ако това е вашата група, напишете "Hello, <група> - I am here!".

cat /etc/group | awk -F ':' '{ if ($1 == "students") { print "Hello, ", $1, " - I am here!"} else { print "Hello, ", $1}}'

38. Shell Script-овете са файлове, които по конвенция имат разширение .sh. Всеки
такъв файл започва с "#!<interpreter>" , където <interpreter> указва на
операционната система какъв интерпретатор да пусне (пр: "#!/bin/bash",
"#!/usr/bin/python3 -u").

Намерете всички .sh файлове в директорията `/usr` и нейните поддиректории, и
проверете кой е най-често използваният интерпретатор.

find /usr -type f -name '*.sh' -exec cat {} ';' | egrep -o '#!.*' | tr -d ' ' | sort | uniq -c | sort -rn | head -n 1 | tr -d '[0-9]* #!'

39. а) Изведете GID-овете на 5-те най-големи групи спрямо броя потребители, за които
съответната група е основна (primary).

б). (*) Изведете имената на съответните групи.

Hint: /etc/passwd

a) cat /etc/passwd | awk -F ':' '{ print $4 }' | sort | uniq -c | sort -rn | head -n 5 | awk '{ print $2 }'

б) cat /etc/passwd | awk -F ':' '{ print $4 }' | sort | uniq -c | sort -rn | head -n 5 | awk '{ print $2 }' | xargs getent group | awk -F ':' '{ print $3, " - ", $1}'

40. Направете файл eternity. Намерете всички файлове, намиращи се във вашата home
директория и нейните поддиректории, които са били модифицирани в последните
15мин (по възможност изключете .).  Запишете във eternity името (път) на
файла и времето (unix time) на последната промяна.

find ~ -mindepth 2 -type f -mmin 15 -printf '%p %T@\n' > eternity

41. Копирайте файл <РЕПО>/exercises/data/population.csv във вашата home директория.

wget https://raw.githubusercontent.com/avelin/fmi-os/master/exercises/data/population.csv

42. Използвайки файл population.csv, намерете колко е общото население на света
през 2008 година. А през 2016?

cat population.csv | tail -n +1 | awk -F , -v year=2008 -v count=0 '$3 == year { count+=$4 } END { print count} '

43. Използвайки файл population.csv, намерете през коя година в България има най-много население.

cat population.csv | grep Bulgaria | sort -rn -t , -k 4 | head -n 1

44. Използвайки файл population.csv, намерете коя държава има най-много население през 2016. А коя е с най-малко население?
(Hint: Погледнете имената на държавите)

cat population.csv | tail -n +1 | grep ,2016, | sed 's/, / /g' | sort -nr -t ',' -k 4 | head -n 1

45. Използвайки файл population.csv, намерете коя държава е на 42-ро място по
население през 1969. Колко е населението й през тази година?

cat population.csv | grep ,1969, | sed 's/, / /g' | sort -nr -t ',' -k 4 | awk 'NR==42 { print $0}'

46. В home директорията си изпълнете командата
curl -o songs.tar.gz "http://fangorn.uni-sofia.bg/misc/songs.tar.gz"

47.Да се разархивира архивът songs.tar.gz в директория songs във вашата home директория.

tar -xf ~/songs.tar.gz

48. Да се изведат само имената на песните.

find ~/songs -type f -printf '%f\n' | tr -d '.ogg'

49. Имената на песните да се направят с малки букви, да се заменят спейсовете с
долни черти и да се сортират.

find ~/songs -type f -printf '%f\n' | tr '[A-Z]' '[a-z]' | tr -d '.ogg' |  tr ' ' '_' | sort

50. Да се изведат всички албуми, сортирани по година.

find ~/songs -type f -printf '%f\n' | egrep -o '\([[:alpha:] ]*, [0-9]+\)' | tr -d '\(\)' | sort -nr -t ',' -k 2 | cut -d ',' -f 1

51. Да се преброят/изведат само песните на Beatles и Pink.

find ~/songs -type f -printf '%f\n' | tr -d '.ogg' | egrep '^(Beatles|Pink) - ' | sort

52. Да се направят директории с имената на уникалните групи. За улеснение, имената
от две думи да се напишат слято:

find ~/songs -type f -printf '%f\n' | cut -d '-' -f 1 | tr -d ' ' | sort | uniq | xargs mkdir

53. Напишете серия от команди, които извеждат детайли за файловете и директориите в
текущата директория, които имат същите права за достъп както най-големият файл
в /etc директорията.

find . -maxdepth 1 -perm $(find /etc -maxdepth 1 -type f -printf "%p %s\n" | sort -nr -t ' ' -k 2 | head -n 1 | cut -d ' ' -f 1 | xargs stat -c "%a")

54. Дадени са ви 2 списъка с email адреси - първият има 12 валидни адреса, а
вторията има само невалидни. Филтрирайте всички адреси, така че да останат
само валидните. Колко кратък регулярен израз можете да направите за целта?

Валидни email адреси (12 на брой):
email@example.com
firstname.lastname@example.com
email@subdomain.example.com
email@123.123.123.123
1234567890@example.com
email@example-one.com
_______@example.com
email@example.name
email@example.museum
email@example.co.jp
firstname-lastname@example.com
unusually.long.long.name@example.com

Невалидни email адреси:
#@%^%#$@#$@#.com
@example.com
myemail
Joe Smith <email@example.com>
email.example.com
email@example@example.com
.email@example.com
email.@example.com
email..email@example.com
email@-example.com
email@example..com
Abc..123@example.com
(),:;<>[\]@example.com
just"not"right@example.com
this\ is"really"not\allowed@example.com

egrep '^([\w]+([\.\-]?[\w]+)+)@([\w]+([\.\-]?[\w]+)+)$'

55. Посредством awk, използвайки emp.data (от 03-a-6000.txt) за входнни данни,
изведете:

- всеки ред, като полетата са в обратен ред

(Разгледайте for цикли в awk)

cat emp.data | awk '{ for(i=NF; i>0; i--) printf "%s ", $i; print ""}'

56. Копирайте <РЕПО>/exercises/data/ssa-input.txt във вашата home директория.
Общият вид на файла е:

- заглавна част:
	Smart Array P440ar in Slot 0 (Embedded)

- една или повече секции за масиви:
	Array A
	Array B
	...
	като буквата (A, B, ...) е името на масива

- във всяка таква секция има една или повече подсекции за дискове:
	physicaldrive 2I:0:5
	physicaldrive 2I:0:6
	...

	като 2I:0:5 е името на диска

- във всяка подсекция за диск има множество параметри във вида:
	key name: value
	като за нас са интересни само:

		Current Temperature (C): 35
		Maximum Temperature (C): 36

Напишете поредица от команди която обработва файл в този формат, и генерира
следният изход:

A-2I:0:5 35 36
A-2I:0:6 34 35
B-1I:1:1 35 50
B-1I:1:2 35 49

x-yyyyyy zz ww

където:
	- x е името на масива
	- yyyyyy е името на диска
	- zz е current temperature
	- ww е max temperature


cat ssa-input.txt | tail -n +4 | grep -v '^$' | tr -s ' ' | awk -v array="" -v drive="" -v curr="" -v max="" '{if ($0~/Array/){printf ("%s-%s %s %s\n", array, drive, curr, max);array=$2} else if($0~/physicaldrive/){printf ("%s-%s %s %s\n", array, drive, curr, max);drive=$2} else if($0~/Current Temperature/){curr=$NF} else if($0~/Maximum Temperature/){max=$NF}} END {printf ("%s-%s %s %s\n", array, drive, curr, max)}' | tail -n +3
